#!/bin/bash
#
#	Command Line Interface to start all services associated with the Ap4Work Application
#
#	The commands are merely a convenience script to run docker compose
#

set -e

LOCAL_APP_URL="http://localhost:8080"
APP_URL="http://ap4work:8080"
ORION="http://orion:1026/version"
CONTEXT="http://context/ngsi-context.jsonld"
CORE_CONTEXT="https://uri.etsi.org/ngsi-ld/v1/ngsi-ld-core-context.jsonld"

if (( $# < 1 )); then
	echo "Illegal number of parameters"
	echo "usage: services [create|ap4work|example|stop|clear|logs]"
	exit 1
fi

pause(){
	printf " "
	count="$1"
	[ "$count" -gt 59 ] && printf "Waiting one minute " || printf " Waiting a few seconds ";
	while [ "$count" -gt 0 ]
	do
		printf "."
		sleep 3
		count=$((count - 3))
	done
	echo ""
}

getHeartbeat(){
	eval "response=$(docker run --network "${COMPOSE_PROJECT_NAME}"_default --rm curlimages/curl -s -o /dev/null -w "%{http_code}" "$1")"
}

waitForApp () {
	echo -e "\n⏳ Waiting for \033[1;34mAp4Work\033[0m to be available\n"
	response=000
	while ! [ `docker inspect --format='{{.State.Health.Status}}' ap4work` == "healthy" ]
	do
		echo -e "\nAp4work HTTP state: ${response} (waiting for 200)"
		pause 6
		getHeartbeat "${APP_URL}/management/health"
	done
}

waitForCoreContext () {
	echo -e "\n⏳ Checking availability of \033[1m core @context\033[0m from ETSI\n"
	eval "response=$(docker run --rm curlimages/curl -s -o /dev/null -w "%{http_code}" "$CORE_CONTEXT")"
	while [ "${response}" -eq 000 ]
	do
		echo -e "\n@context HTTP state: ${response} (waiting for 200)"
		pause 3
		eval "response=$(docker run --rm curlimages/curl -s -o /dev/null -w "%{http_code}" "$CORE_CONTEXT")"
	done
}

waitForMongo () {
	echo -e "\n⏳ Waiting for \033[1mMongoDB\033[0m to be available\n"
	while ! [ `docker inspect --format='{{.State.Health.Status}}' db-mongo` == "healthy" ]
	do 
		sleep 1
	done
}

stoppingContainers () {
	echo "Stopping containers"
	docker compose -f docker-compose/app.yml -f docker-compose/orion-ld.yml stop
}

clearContainers () {
	CONTAINERS=$(docker ps --filter "label=com.bidirco=ap4work" -aq)
	if [[ -n $CONTAINERS ]]; then 
		echo "Stopping containers"
		docker rm -f $CONTAINERS || true
	fi
	VOLUMES=$(docker volume ls -qf dangling=true) 
	if [[ -n $VOLUMES ]]; then 
		echo "Removing old volumes"
		docker volume rm $VOLUMES || true
	fi
	NETWORKS=$(docker network ls  --filter "label=com.bidirco=ap4work" -q) 
	if [[ -n $NETWORKS ]]; then 
		echo "Removing services networks"
		docker network rm $NETWORKS || true
	fi
}

addDatabaseIndex () {
	printf "Create \033[1mMongoDB\033[0m database indexes ..."
	docker exec db-mongo mongo --eval '
	conn = new Mongo();db.createCollection("orion");
	db = conn.getDB("orion");
	db.createCollection("entities");
	db.entities.createIndex({"_id.servicePath": 1, "_id.id": 1, "_id.type": 1}, {unique: true});
	db.entities.createIndex({"_id.type": 1});
	db.entities.createIndex({"_id.id": 1});' > /dev/null
	echo -e " \033[1;32mdone\033[0m"
}

loadExampleData () {
	printf "Load example data for \033[1mAp4Work\033[0m into postgresql database ...\n"
	dataTables=("app_user" "person" "workstation" "task_action" "support_area" "comment" "issue" "issue_feedback" "operation" "task" "work_note" "rel_person__roles" "rel_person__workstations")
	docker cp ./data postgresql-db:/var/lib/postgresql/example-data
	for table in ${dataTables[@]}; do
		docker exec postgresql-db psql -d ap4work -U ap4work -c "\copy ${table} from '/var/lib/postgresql/example-data/${table}.csv' delimiter ';' CSV HEADER;"
	done
	echo -e " \033[1;32mdone\033[0m"
}

displayServices () {
	echo ""
	docker ps --format "table {{.Names}}\t{{.Status}}\t{{.Ports}}" --filter name="$1"-*
	echo ""
}

command="$1"
case "${command}" in
	"help")
		echo "usage: services [create|ap4work|example|stop|clear|logs]"
		;;
	"ap4work")
		export $(cat .env | grep "#" -v)
		stoppingContainers
		waitForCoreContext
		echo -e "Starting containers: \033[1;34mAp4Work\033[0m  \033[1;30mPostgreSQL\033[0m, \033[1;30mKeycloak\033[0m,  \033[1;30mOrion-LD\033[0m, a \033[1;30mMongoDB\033[0m database."
		echo -e "- \033[1;34mAp4Work\033[0m is the application"
		echo ""
		docker compose -f docker-compose/optional-services.yml -f docker-compose/app.yml up -d --remove-orphans --renew-anon-volumes
		waitForMongo
		addDatabaseIndex
		waitForApp
		displayServices
		echo -e "\n⚡ \033[1;34mAp4Work\033[0m is now available!"
		echo -e "\n⚡ Go to ${LOCAL_APP_URL}\n"
		;;
	"stop")
		export $(cat .env | grep "#" -v)
		stoppingContainers
		;;
	"clear")
		export $(cat .env | grep "#" -v)
		clearContainers
		;;
	"start")
		export $(cat .env | grep "#" -v)
		./services ap4work $2
		;;
	"example")
		export $(cat .env | grep "#" -v)
		./services ap4work
		loadExampleData
		echo -e "\n⚡ \033[1;34mAp4Work\033[0m is now available with example data!"
		echo -e "\n⚡ Go to ${LOCAL_APP_URL}\n"
		;;
	"create")
		export $(cat .env | grep "#" -v)
		echo "Pulling Docker images"
		docker pull curlimages/curl
		docker compose -f docker-compose/app.yml -f docker-compose/orion-ld.yml pull
		;;
	"logs")
		export $(cat .env | grep "#" -v)
		docker compose logs
		;;
	*)
		echo "Command not Found."
		echo "usage: services [create|ap4work|example|stop|clear|logs]"
		exit 127;
		;;
esac
